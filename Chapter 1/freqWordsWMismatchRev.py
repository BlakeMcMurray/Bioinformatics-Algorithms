import dNeighborhood as dNay
import mostFrequentSort as MFS
import approxPatMatch as aprx
import reverseComplement as rev
def freqMisMatchReverse(Text,k,d):
   
    close = [0]*4**k
    freq = [0]*4**k
    patterns = []
    for i in range(len(Text)-k+1):
        neigh = dNay.iterativeNeighbors(Text[i:i+k],d)
        for i in neigh:
            close[MFS.patternToNumber(i)] = 1
            close[MFS.patternToNumber(rev.reverseComp(i))] = 1

    for i in range(len(close)):
        if(close[i] == 1):
            freq[i] = len(aprx.approxMatch(MFS.numbertoPattern(i,k),Text,d)) + len(aprx.approxMatch(rev.reverseComp(MFS.numbertoPattern(i,k)),Text,d))

    m = max(freq)

    for i in range(len(freq)):
        if (freq[i] == m):
            patterns.append(MFS.numbertoPattern(i,k))
    return(patterns)



find = freqMisMatchReverse("AATCTGGCCGCGGCAATCTGGCCGCGGCCCGCGGCCCGCGGCCCGCGGCCCTCGAGTCCCGGAAATCTGGTCCCGGATCCCGGAAGGATCAAGCCTCGAGCCTCGAGTCCCGGACCGCGGCTCCCGGACCGCGGCTCCCGGAAGGATCAAGAATCTGGAGGATCAAGTCCCGGACCGCGGCAGGATCAAGTCCCGGAAGGATCAAGTCCCGGAAATCTGGCCTCGAGTCCCGGAAATCTGGTCCCGGACCTCGAGCCTCGAGCCTCGAGCCTCGAGAGGATCAAGCCGCGGCAGGATCAAGCCGCGGCCCTCGAGTCCCGGATCCCGGACCGCGGCAATCTGGAGGATCAAGCCGCGGCCCTCGAGAATCTGGCCTCGAGTCCCGGATCCCGGAAGGATCAAGTCCCGGATCCCGGAAGGATCAAGAATCTGGAATCTGGTCCCGGATCCCGGAAATCTGGAGGATCAAGCCTCGAGAATCTGGCCGCGGCAATCTGGAGGATCAAGAGGATCAAGAATCTGGCCGCGGCAGGATCAAGTCCCGGAAGGATCAAGTCCCGGATCCCGGAAGGATCAAGTCCCGGACCGCGGCAGGATCAAGAATCTGGAGGATCAAGTCCCGGACCTCGAGCCGCGGCTCCCGGACCTCGAGCCGCGGCTCCCGGATCCCGGAAATCTGGCCGCGGCAATCTGGAGGATCAAGTCCCGGATCCCGGACCGCGGCAGGATCAAGAGGATCAAGTCCCGGACCTCGAGCCGCGGCAGGATCAAGAATCTGGAGGATCAAGCCTCGAGCCTCGAGAGGATCAAGAATCTGGAATCTGGAGGATCAAGCCTCGAGTCCCGGA",5,3)


f = open("out.txt","w")
for i in find:
    f.write(i + " ")