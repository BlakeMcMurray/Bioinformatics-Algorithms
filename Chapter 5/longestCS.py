#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 31 11:30:45 2018

@author: blakemcmurray
"""
def OutputLCS(Backtrack, v,i,j,toReturn):
    if i == 0 or j == 0:
        return
    #print(Backtrack[i,j])
    if Backtrack[i,j] == "upNeighbor":
        OutputLCS(Backtrack,v,i-1,j,toReturn)
    elif Backtrack[i,j] == "rightNeighbor":
        OutputLCS(Backtrack,v,i,j-1,toReturn)
    else:
        OutputLCS(Backtrack,v,i-1,j-1,toReturn)
       # print(i)
        toReturn.append(v[i-1])
        
    return(toReturn)

def LCSBacktrack(v,w):
    s = {}
    backtrack = {}
    for i in range(len(v)+1):
        s[i,0] = 0
    for j in range(len(w)+1):
        s[0,j] = 0
    for i in range(1,len(v)+1):
        for j in range(1,len(w)+1):
           # print(v[i-1],w[j-1])
            #print(i,j)
            k = max(s[i-1,j],s[i,j-1]) 
            s[i,j] = k
            if (v[i-1] == w[j-1]):     
                s[i,j] = max(k,s[i-1,j-1]+1)
            if s[i,j] == s[i-1,j]:
                backtrack[i,j] = "upNeighbor"
            elif s[i,j] == s[i,j-1]:
                backtrack[i,j] = "rightNeighbor"
            elif s[i,j] == s[i-1,j-1]+1 and v[i-1] == w[j-1]:
                backtrack[i,j] = "diagnalNeighbor"
    toReturn = []
    #for i in s:
       # print(i,s[i])
        
    toReturnAgain = OutputLCS(backtrack,v, len(v),len(w),toReturn)
    return(toReturnAgain)
    
    

v = "TGCCTTCACCTGGTCTGTTGGGGCTTACACGGCCAGATCTTCAAGAAGCAACCTGATGGCACCTTGAGCGTTCATTTGACTATAGCCAACACACAGTCATGACAGGCGCAATGTGGACAGTGCGGCATTGACCTTTCCGGTGCTCTTGGGGGCGTGCCCATTGAGGATGAGACCTCTTCCGTGATTCGAGATAATGTAGCAGCTGTGCGCATAGATTGAGGCGTGCGTGCCGGTGATTCCACTCTCTGTAATGATAGCGCTAACTTGTACTTTATTTTGAACGATGCCGCGTCCACGCTAGCTTCAAGGTGACCGACTAATTAAAACTTTCCCCTAGCGCTGTTCGTTGTTCTCATGGGAAAACAGGACCAGTTCCTATGAATGCCTTCAGAATCCGCTAACCTTACTTAGTTTCAAATGACTACGGCCTACGTTAACGATAAGCGCGTTCGTACGTGGCTGATATAATATACGATCGCACCTCACGTCCGGGACGGTCGGAACCGGCCTATAGGAATACGCAATCACGCGGAGGTGCGCGAGCGGGCAGTTGTGCGCAGCGATACGGGGCAGGGGCGTGAGCATTGATCTTCACTTTCGACACGTTGTGTGATTTTGCGGCACCGCAGCTGCATTCCAAACTATCGGTCGCGGTAGCCGGTAGAGGGAACGCTTTACACTAGAGCGGTATCAGGGCCAGGTTCTTGCAAGTTTAAGTGACTGCAGTTGCGCGGTCCTATAGCGCACTATCAAACGCAACGTCCCCTGATCGGCCCTAGTGCAATTGATCCGAGTTCAAAGAATGCTTTGTTCTAGTTCCTCTTATTGGTGCCGGATTAGTCGTCGCAACAAATTC"
w = "GCGCTTACGTCAGGCGTATGGTCTAGCACGCTGCGAGCATTACCACGAATTGCAAGATTCGGGGAGTAGGTCAGCAACGAATACACCCAACAATATAGAACTAGCGATATTACATATATGGCAACATGACCCTCTCAAGCTCCTGGACCAAACTATGAACGGCGGGAAACCATCGATTACTCGCTGGGCGTGTAGTCAGGACCGATCTTGGATTGGGGAAACACAACCCCTTCCAGGGTCGCGTAGGCCGCGATCCATTGGGCTGTCTGAGGAATTTGTTGATAACTTGGTGAATCATAGTATTATCATTGTCCTCTAATCTATCTTCAAGTTAATCCGAACCTGTTTACACGCCATGCAACCCCTGCTAGCCAGCTCCAGCCAGGAGACTGCGACAAGGGCGACTTTTGAATTATATATAAAAACATGACTTCAGGTGGCTGATCGTGACATTCAGCTAACCTAAAGCCGTGTCCCCTCCCCCCAGCGGCCGCAGTGTGGTTAAGTTGACATTTCCTCCACCCTATTGCTCTTGCGGGGTGACATCAGCTAAACAGTTAGTTCTTCTCCGTAGTCTTCTATGTATCTGGCAACGTTCTTCTTTACAGCCGGGCGCGCCCCCAACCAAAAGGCCGGTCCGTAGCACGACGGTTCCCGGCAGAGCACTTCCGGGCACCTCGACATTAGCATCATAACCGAGTGGCTAGGGTCTGGATATGGATCCCGAGGCTTCAGCGAGTGCTCTTTCTATCACGAGACACACATTAACCGCAGTGTATTATTAACGCTTGCGGAGTGGGTACGTAAAGCTCCGGAATTGGTCTCTGTCCAACCGGATCGCCACTCTA"

Backtrack = LCSBacktrack(v,w)
string = ""
for i in Backtrack:
    string = string + i
    
print(string)